
LCS(char s1[], char s2[], int e, int f) 
    ignore the algorithm for LCS 
    return LCS_length


LTS(char A[], int x, int index)
    split A[] from 1st index (A[0])
    s1 = A[index]
    s2 = A[index -> end] (s2 contains integers from 2nd index to the end)
    // LOOK BELOW HOW TO SPLIT 
    e = strlen(s1)
    f = strlen(s2)
    LCS(s1, s2, e, f) *calls LCS*
    if LCS_length > x:
        index += 1
        x = LCS_length
        LTS(A[], int x)
    else: 
        return LCS_length

main()
    char A[], s1[], s2[];
    index = 0
    int x, e, f;
    splitAinHalf(A, e, f)
    LTS(A, x, index)

    print("LTS length is", LCS_length)

In the recursion the array is supposed to split this way using example array of 1234567891
1st time -- s1 = {1} s2 = {234567891}  LCS_length LCS 
2nd time -- s1 = {12} s2 = {34567891}
3rd time -- s1 = {123} s2 = {4567891}
4th time -- s1 = {1234} s2 = {567891}
5th time -- s1 = {12345} s2 = {67891} LCS_length from splitAinHalf function
6th time -- s1 = {123456} s2 = {7891}
7th time -- s1 = {1234567} s2 = {891}
8th time -- s1 = {12345678} s2 = {91}
9th time -- s1 = {123456789} s2 = {1}

